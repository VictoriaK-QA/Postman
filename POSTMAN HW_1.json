		{
			"name": "HW#1",
			"item": [
				{
					"name": "EP_1",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://162.55.220.72:5005/get_method?name=Victoria&age=28",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"get_method"
							],
							"query": [
								{
									"key": "name",
									"value": "Victoria"
								},
								{
									"key": "age",
									"value": "28"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "EP_2",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "Victoria",
									"type": "default"
								},
								{
									"key": "age",
									"value": "28",
									"type": "default"
								},
								{
									"key": "salary",
									"value": "1000",
									"type": "default"
								}
							]
						},
						"url": {
							"raw": "http://162.55.220.72:5005/user_info_3",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"user_info_3"
							]
						}
					},
					"response": []
				},
				{
					"name": "EP_3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "http://162.55.220.72:5005/object_info_1?name=Victoria&age=25&weight=50",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"object_info_1"
							],
							"query": [
								{
									"key": "name",
									"value": "Victoria"
								},
								{
									"key": "age",
									"value": "25"
								},
								{
									"key": "weight",
									"value": "50"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "EP_4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "http://162.55.220.72:5005/object_info_2?name=Victoria&age=28&salary=1000",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"object_info_2"
							],
							"query": [
								{
									"key": "name",
									"value": "Victoria"
								},
								{
									"key": "age",
									"value": "28"
								},
								{
									"key": "salary",
									"value": "1000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "EP_5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "http://162.55.220.72:5005/object_info_3?name=Victoria&age=28&salary=1000",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"object_info_3"
							],
							"query": [
								{
									"key": "name",
									"value": "Victoria"
								},
								{
									"key": "age",
									"value": "28"
								},
								{
									"key": "salary",
									"value": "1000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "EP_6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "http://162.55.220.72:5005/object_info_4?name=Victoria&age=28&salary=1000",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"object_info_4"
							],
							"query": [
								{
									"key": "name",
									"value": "Victoria"
								},
								{
									"key": "age",
									"value": "28"
								},
								{
									"key": "salary",
									"value": "1000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "EP_7",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "Victoria",
									"type": "default"
								},
								{
									"key": "age",
									"value": "28",
									"type": "default"
								},
								{
									"key": "salary",
									"value": "1000"
								}
							]
						},
						"url": {
							"raw": "http://162.55.220.72:5005/user_info_2",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"user_info_2"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "lesson_2",
			"item": [
				{
					"name": "/user_info_3",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "Victoria",
									"type": "default"
								},
								{
									"key": "age",
									"value": "28",
									"type": "default"
								},
								{
									"key": "salary",
									"value": "1000",
									"type": "default"
								}
							]
						},
						"url": {
							"raw": "{{url}}/user_info_3",
							"host": [
								"{{url}}"
							],
							"path": [
								"user_info_3"
							]
						}
					},
					"response": []
				},
				{
					"name": "/login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"var resp_token = jsonData.token\r",
									"console.log(resp_token)\r",
									"\r",
									"pm.environment.set(\"token\", resp_token);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "login",
									"value": "Victoria",
									"type": "default"
								},
								{
									"key": "password",
									"value": "4564vf45ss",
									"type": "default"
								}
							]
						},
						"url": {
							"raw": "{{url}}/login",
							"host": [
								"{{url}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "/new_data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"var resp_age = jsonData.age;\r",
									"\r",
									"var req = request.data;\r",
									"var req_age = +req.age;\r",
									"\r",
									"console.log(\"resp_age = \" + resp_age)\r",
									"console.log(\"req_age = \" + req_age)\r",
									"\r",
									"// pm.test(\"Req_Resp_AGE_check\", function () {\r",
									"//     pm.expect(resp_age).to.eql(38);\r",
									"// });\r",
									"\r",
									"// pm.test(\"Req_Resp_AGE_check\", function () {\r",
									"//     pm.expect(resp_age).to.eql(28);\r",
									"// });\r",
									"\r",
									"pm.test(\"Req_Resp_AGE_check\", function () {\r",
									"    pm.expect(resp_age).to.eql(req_age);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "Victoria",
									"type": "default"
								},
								{
									"key": "age",
									"value": "28",
									"type": "default"
								},
								{
									"key": "salary",
									"value": "1000",
									"type": "default"
								},
								{
									"key": "auth_token",
									"value": "{{token}}",
									"type": "default"
								}
							]
						},
						"url": {
							"raw": "{{url}}/new_data",
							"host": [
								"{{url}}"
							],
							"path": [
								"new_data"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "HW#2",
			"item": [
				{
					"name": "1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 2.Статус код 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"// 3. Проверить, что в body приходит правильный string.\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!ss\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://162.55.220.72:5005/first",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"first"
							]
						}
					},
					"response": []
				},
				{
					"name": "2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 1. Отправить запрос.\r",
									"// 2. Статус код 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// 3. Спарсить response body в json.\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"// 4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
									"var resp_name = jsonData.name;\r",
									"console.log(\"resp_name = \" + resp_name)\r",
									"pm.test(\"NAME_check\", function () {\r",
									"    pm.expect(resp_name).to.eql(\"Victoria\");\r",
									"});\r",
									"\r",
									"// 5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
									"var resp_age = jsonData.age;\r",
									"var resp_age = +resp_age;\r",
									"console.log(\"resp_age = \" +resp_age)\r",
									"pm.test(\"AGE_check\", function () {\r",
									"    pm.expect(resp_age).to.eql(28);\r",
									"});\r",
									"\r",
									"// 6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
									"var resp_salary = jsonData.salary;\r",
									"console.log(\"resp_salary = \" +resp_salary)\r",
									"pm.test(\"SALARY_check\", function () {\r",
									"    pm.expect(resp_salary).to.eql(1000);\r",
									"});\r",
									"\r",
									"// 7. Спарсить request\r",
									"var req = request.data;\r",
									"\r",
									"// 8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
									"var req_name = req.name;\r",
									"\r",
									"console.log(\"resp_name = \" + resp_name)\r",
									"console.log(\"req_name = \" + req_name)\r",
									"\r",
									"pm.test(\"Req_Resp_NAME_check\", function () {\r",
									"    pm.expect(resp_name).to.eql(req_name);\r",
									"});\r",
									"\r",
									"// 9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
									"var req_age = req.age;\r",
									"var req_age = +req_age;\r",
									"\r",
									"console.log(\"resp_age = \" + resp_age)\r",
									"console.log(\"req_age = \" + req_age)\r",
									"\r",
									"pm.test(\"Req_Resp_AGE_check\", function () {\r",
									"    pm.expect(resp_age).to.eql(req_age);\r",
									"});\r",
									"\r",
									"// 10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
									"var req_salary = req.salary;\r",
									"var req_salary = +req_salary;\r",
									"\r",
									"console.log(\"resp_salary = \" + resp_salary)\r",
									"console.log(\"req_salary = \" + req_salary)\r",
									"\r",
									"pm.test(\"Req_Resp_SALARY_check\", function () {\r",
									"    pm.expect(resp_salary).to.eql(req_salary);\r",
									"});\r",
									"\r",
									"// 11. Вывести в консоль параметр family из response\r",
									"var resp_family = jsonData.family\r",
									"console.log(resp_family)\r",
									"\r",
									"// 12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
									"var resp_u_salary_1_5_year = jsonData.family.u_salary_1_5_year;\r",
									"\r",
									"var req = request.data;\r",
									"\r",
									"console.log(\"resp_u_salary_1_5_year = \" + resp_u_salary_1_5_year)\r",
									"\r",
									"pm.test(\"Req_Resp_u_salary_1_5_year_check\", function () {\r",
									"    pm.expect(jsonData.family.u_salary_1_5_year).to.eql(req.salary*4);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "Victoria",
									"type": "default"
								},
								{
									"key": "age",
									"value": "28",
									"type": "default"
								},
								{
									"key": "salary",
									"value": "1000",
									"type": "default"
								}
							]
						},
						"url": {
							"raw": "{{url}}/user_info_3",
							"host": [
								"{{url}}"
							],
							"path": [
								"user_info_3"
							]
						}
					},
					"response": []
				},
				{
					"name": "2 Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Статус код 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// 3. Спарсить response body в json.\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"// 4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
									"var resp_name = jsonData.name;\r",
									"console.log(\"resp_name = \" + resp_name)\r",
									"pm.test(\"NAME_check\", function () {\r",
									"    pm.expect(resp_name).to.eql(\"Victoria\");\r",
									"});\r",
									"\r",
									"// 5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
									"var resp_age = jsonData.age;\r",
									"var resp_age = +resp_age;\r",
									"console.log(\"resp_age = \" +resp_age)\r",
									"pm.test(\"AGE_check\", function () {\r",
									"    pm.expect(resp_age).to.eql(28);\r",
									"});\r",
									"\r",
									"// 6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
									"var resp_salary = jsonData.salary;\r",
									"console.log(\"resp_salary = \" +resp_salary)\r",
									"pm.test(\"SALARY_check\", function () {\r",
									"    pm.expect(resp_salary).to.eql(1000);\r",
									"});\r",
									"\r",
									"// 7. Спарсить request\r",
									"var req = request.data;\r",
									"\r",
									"// 8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
									"var req_name = req.name;\r",
									"\r",
									"console.log(\"resp_name = \" + resp_name)\r",
									"console.log(\"req_name = \" + req_name)\r",
									"\r",
									"pm.test(\"Req_Resp_NAME_check\", function () {\r",
									"    pm.expect(resp_name).to.eql(req_name);\r",
									"});\r",
									"\r",
									"// 9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
									"var req_age = req.age;\r",
									"var req_age = +req_age;\r",
									"\r",
									"console.log(\"resp_age = \" + resp_age)\r",
									"console.log(\"req_age = \" + req_age)\r",
									"\r",
									"pm.test(\"Req_Resp_AGE_check\", function () {\r",
									"    pm.expect(resp_age).to.eql(req_age);\r",
									"});\r",
									"\r",
									"// 10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
									"var req_salary = req.salary;\r",
									"var req_salary = +req_salary;\r",
									"\r",
									"console.log(\"resp_salary = \" + resp_salary)\r",
									"console.log(\"req_salary = \" + req_salary)\r",
									"\r",
									"pm.test(\"Req_Resp_SALARY_check\", function () {\r",
									"    pm.expect(resp_salary).to.eql(req_salary);\r",
									"});\r",
									"\r",
									"// 11. Вывести в консоль параметр family из response\r",
									"var resp_family = jsonData.family\r",
									"console.log(resp_family)\r",
									"\r",
									"// 12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
									"// var resp_u_salary_1_5_year = jsonData.family.u_salary_1_5_year;\r",
									"\r",
									"// var req = request.data;\r",
									"// var req_u_salary_1_5_year = jsonData.family.u_salary_1_5_year;\r",
									"\r",
									"// console.log(\"resp_u_salary_1_5_year = \" + resp_u_salary_1_5_year)\r",
									"\r",
									"// pm.test(\"Req_Resp_u_salary_1_5_year_check\", function () {\r",
									"//     pm.expect(jsonData.family.u_salary_1_5_year).to.eql(jsonData.salary*4);\r",
									"// });\r",
									"var resp_u_salary_1_5_year = jsonData.family.u_salary_1_5_year;\r",
									"console.log(\"resp_u_salary_1_5_year = \" + resp_u_salary_1_5_year)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "Victoria",
									"type": "default"
								},
								{
									"key": "age",
									"value": "28",
									"type": "default"
								},
								{
									"key": "salary",
									"value": "1000",
									"type": "default"
								}
							]
						},
						"url": {
							"raw": "{{url}}/user_info_3",
							"host": [
								"{{url}}"
							],
							"path": [
								"user_info_3"
							]
						}
					},
					"response": []
				},
				{
					"name": "3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 1. Отправить запрос.\r",
									"// 2. Статус код 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// 3. Спарсить response body в json.\r",
									"var resp = pm.response.json();\r",
									"\r",
									"// 4. Спарсить request.\r",
									"var req = pm.request.url.query.toObject();\r",
									"console.log(\"текст\");\r",
									"console.log(req.name);\r",
									"\r",
									"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
									"pm.test(\"Req_Resp_NAME_check\", function () {\r",
									"    pm.expect(resp.name).to.eql(req.name);\r",
									"});\r",
									"\r",
									"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
									"pm.test(\"Req_Resp_AGE_check\", function () {\r",
									"    pm.expect(resp.age).to.eql(req.age);\r",
									"});\r",
									"\r",
									"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
									"pm.test(\"Req_Resp_SALARY_check\", function () {\r",
									"    pm.expect(resp.salary).to.eql(+req.salary);\r",
									"});\r",
									"\r",
									"//  8. Вывести в консоль параметр family из response.\r",
									"console.log(resp.family)\r",
									"\r",
									"// 9. Проверить, что у параметра dog есть параметры name\r",
									"pm.test(\"dog_parameter_check_name\", function () {\r",
									"    pm.expect(resp.family.pets.dog).to.have.property(\"name\");\r",
									"});\r",
									"\r",
									"// 10. Проверить, что у параметра dog есть параметры age.\r",
									"pm.test(\"dog_parameter_check_age\", function () {\r",
									"    pm.expect(resp.family.pets.dog).to.have.property(\"age\");\r",
									"});\r",
									"// 11. Проверить, что параметр name имеет значение Luky.\r",
									"console.log(resp.family.pets.dog.name)\r",
									"\r",
									"pm.test(\"dog_name_Luky\", function () {\r",
									"    pm.expect(resp.family.pets.dog).to.have.property(\"name\");\r",
									"});\r",
									"// 12. Проверить, что параметр age имеет значение 4.\r",
									"console.log(resp.family.pets.dog.age)\r",
									"\r",
									"pm.test(\"dog_age_4\", function () {\r",
									"    pm.expect(resp.family.pets.dog.age).to.eql(4);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "http://162.55.220.72:5005/object_info_3?name=Victoria&age=28&salary=1000",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"object_info_3"
							],
							"query": [
								{
									"key": "name",
									"value": "Victoria"
								},
								{
									"key": "age",
									"value": "28"
								},
								{
									"key": "salary",
									"value": "1000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 2. Статус код 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// 3. Спарсить response body в json.\r",
									"var resp = pm.response.json();\r",
									"\r",
									"// 4. Спарсить request.\r",
									"var req = pm.request.url.query.toObject();\r",
									"\r",
									"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
									"pm.test(\"Req_Resp_NAME_check\", function () {\r",
									"    pm.expect(resp.name).to.eql(req.name);\r",
									"});\r",
									"\r",
									"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
									"pm.test(\"Req_Resp_AGE_check\", function () {\r",
									"    pm.expect(resp.age).to.eql(+req.age);\r",
									"});\r",
									"\r",
									"// 7. Вывести в консоль параметр salary из request.\r",
									"console.log(req.salary)\r",
									"\r",
									"// 8. Вывести в консоль параметр salary из response.\r",
									"console.log(resp.salary)\r",
									"\r",
									"// 9. Вывести в консоль 0-й элемент параметра salary из response.\r",
									"console.log(resp.salary[0])\r",
									"\r",
									"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
									"console.log(resp.salary[1])\r",
									"\r",
									"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
									"console.log(resp.salary[2])\r",
									"\r",
									"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
									"pm.test(\"Req_Resp_0_SALARY_check\", function () {\r",
									"    pm.expect(+resp.salary[0]).to.eql(+req.salary);\r",
									"});\r",
									"\r",
									"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
									"pm.test(\"Req_Resp_1_SALARY_check\", function () {\r",
									"    pm.expect(+resp.salary[1]).to.eql(+req.salary*2);\r",
									"});\r",
									"\r",
									"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
									"pm.test(\"Req_Resp_2_SALARY_check\", function () {\r",
									"    pm.expect(+resp.salary[2]).to.eql(+req.salary*3);\r",
									"});\r",
									"\r",
									"// 15. Создать в окружении переменную name\r",
									"pm.environment.get(\"name\");\r",
									"\r",
									"// 16. Создать в окружении переменную age\r",
									"pm.environment.get(\"age\");\r",
									"\r",
									"// 17. Создать в окружении переменную salary\r",
									"pm.environment.get(\"salary\");\r",
									"\r",
									"// 18. Передать в окружение переменную name\r",
									"var jsonData = pm.response.json();\r",
									"var resp_name = jsonData.name\r",
									"console.log(resp_name)\r",
									"\r",
									"pm.environment.set(\"name\", resp_name);\r",
									"\r",
									"// 19. Передать в окружение переменную age\r",
									"var resp_age = jsonData.age\r",
									"console.log(resp_age)\r",
									"\r",
									"pm.environment.set(\"age\", resp_age);\r",
									"\r",
									"// 20. Передать в окружение переменную salary\r",
									"var resp_salary = jsonData.salary\r",
									"console.log(resp_salary)\r",
									"\r",
									"pm.environment.set(\"salary\", resp_salary[1]);\r",
									"\r",
									"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
									"console.log(\"цикл\");\r",
									"for (var s in resp_salary){\r",
									"    console.log(resp_salary[s])\r",
									"};\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "http://162.55.220.72:5005/object_info_4?name=Victoria&age=28&salary=1000",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"object_info_4"
							],
							"query": [
								{
									"key": "name",
									"value": "Victoria"
								},
								{
									"key": "age",
									"value": "28"
								},
								{
									"key": "salary",
									"value": "1000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "5",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 1. Вставить параметр salary из окружения в request\r",
									"// 2. Вставить параметр age из окружения в age\r",
									"// 3. Вставить параметр name из окружения в name\r",
									"// 4. Отправить запрос.\r",
									"// 5. Статус код 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// 6. Спарсить response body в json.\r",
									"var resp = pm.response.json();\r",
									"\r",
									"// 7. Спарсить request.\r",
									"var req = request.data;\r",
									"\r",
									"// 8. Проверить, что json response имеет параметр start_qa_salary\r",
									"pm.test(\"json_response_check_start_qa_salary\", function () {\r",
									"    pm.expect(resp).to.have.property(\"start_qa_salary\");\r",
									"});\r",
									"\r",
									"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
									"pm.test(\"json_response_qa_salary_after_6_months\", function () {\r",
									"    pm.expect(resp).to.have.property(\"qa_salary_after_6_months\");\r",
									"});\r",
									"\r",
									"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
									"pm.test(\"json_response_qa_salary_after_12_months\", function () {\r",
									"    pm.expect(resp).to.have.property(\"qa_salary_after_12_months\");\r",
									"});\r",
									"\r",
									"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
									"pm.test(\"json_response_qa_salary_after_1.5_year\", function () {\r",
									"    pm.expect(resp).to.have.property(\"qa_salary_after_1.5_year\");\r",
									"});\r",
									"\r",
									"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
									"pm.test(\"json_response_qa_salary_after_3.5_years\", function () {\r",
									"    pm.expect(resp).to.have.property(\"qa_salary_after_3.5_years\");\r",
									"});\r",
									"\r",
									"// 13. Проверить, что json response имеет параметр person\r",
									"pm.test(\"json_response_person\", function () {\r",
									"    pm.expect(resp).to.have.property(\"person\");\r",
									"});\r",
									"\r",
									"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
									"pm.test(\"Req_Resp_START_SALARY_check\", function () {\r",
									"    pm.expect(resp.start_qa_salary).to.eql(+req.salary);\r",
									"});\r",
									"\r",
									"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
									"pm.test(\"Req_Resp_6_SALARY_check\", function () {\r",
									"    pm.expect(resp.qa_salary_after_6_months).to.eql(+req.salary*2);\r",
									"});\r",
									"\r",
									"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
									"pm.test(\"Req_Resp_12_SALARY_check\", function () {\r",
									"    pm.expect(resp.qa_salary_after_12_months).to.eql(+req.salary*2.7);\r",
									"});\r",
									"\r",
									"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
									"pm.test(\"Req_Resp_1.5year_SALARY_check\", function () {\r",
									"    pm.expect(resp['qa_salary_after_1.5_year']).to.eql(+req.salary*3.3);\r",
									"});\r",
									"\r",
									"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
									"pm.test(\"Req_Resp_3.5years_SALARY_check\", function () {\r",
									"    pm.expect(resp['qa_salary_after_3.5_years']).to.eql(+req.salary*3.8);\r",
									"});\r",
									"\r",
									"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
									"pm.test(\"Req_Resp_person1_SALARY_check\", function () {\r",
									"    pm.expect(resp.person.u_name[1]).to.eql(+req.salary);\r",
									"});\r",
									"\r",
									"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
									"pm.test(\"Req_Resp_personage_SALARY_check\", function () {\r",
									"    pm.expect(resp.person.u_age).to.eql(+req.age);\r",
									"});\r",
									"\r",
									"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
									"pm.test(\"Req_Resp_5_years_SALARY_check\", function () {\r",
									"    pm.expect(resp.person.u_salary_5_years).to.eql(+req.salary*4.2);\r",
									"});\r",
									"\r",
									"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
									"console.log(\"цикл\");\r",
									"for (var p in resp.person){\r",
									"    console.log(resp.person[p])\r",
									"};"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "{{name}}",
									"type": "default"
								},
								{
									"key": "age",
									"value": "{{age}}",
									"type": "default"
								},
								{
									"key": "salary",
									"value": "{{salary}}",
									"type": "default"
								}
							]
						},
						"url": {
							"raw": "http://162.55.220.72:5005/user_info_2",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"user_info_2"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "HW#3",
			"item": [
				{
					"name": "1 /login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"var resp_token = jsonData.token\r",
									"console.log(resp_token)\r",
									"\r",
									"pm.environment.set(\"token\", resp_token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "login",
									"value": "vika33",
									"type": "default"
								},
								{
									"key": "password",
									"value": "1234zaq",
									"type": "default"
								}
							]
						},
						"url": {
							"raw": "http://162.55.220.72:5005/login",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "2 /user_info",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 1. Статус код 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"// 2. Проверка структуры json в ответе.\r",
									"var schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"default\": {},\r",
									"    \"title\": \"Root Schema\",\r",
									"    \"required\": [\r",
									"        \"person\",\r",
									"        \"qa_salary_after_12_months\",\r",
									"        \"qa_salary_after_6_months\",\r",
									"        \"start_qa_salary\"\r",
									"    ],\r",
									"    \"properties\": {\r",
									"        \"person\": {\r",
									"            \"type\": \"object\",\r",
									"            \"default\": {},\r",
									"            \"title\": \"The person Schema\",\r",
									"            \"required\": [\r",
									"                \"u_age\",\r",
									"                \"u_name\",\r",
									"                \"u_salary_1_5_year\"\r",
									"            ],\r",
									"            \"properties\": {\r",
									"                \"u_age\": {\r",
									"                    \"type\": \"integer\",\r",
									"                    \"default\": 0,\r",
									"                    \"title\": \"The u_age Schema\",\r",
									"                    \"examples\": [\r",
									"                        28\r",
									"                    ]\r",
									"                },\r",
									"                \"u_name\": {\r",
									"                    \"type\": \"array\",\r",
									"                    \"default\": [],\r",
									"                    \"title\": \"The u_name Schema\",\r",
									"                    \"items\": {\r",
									"                        \"anyOf\": [{\r",
									"                            \"type\": \"string\",\r",
									"                            \"default\": \"\",\r",
									"                            \"title\": \"A Schema\",\r",
									"                            \"examples\": [\r",
									"                                \"Victoria\"\r",
									"                            ]\r",
									"                        },\r",
									"                        {\r",
									"                            \"type\": \"integer\",\r",
									"                            \"title\": \"A Schema\",\r",
									"                            \"examples\": [\r",
									"                                1000,\r",
									"                                28\r",
									"                            ]\r",
									"                        }]\r",
									"                    },\r",
									"                    \"examples\": [\r",
									"                        [\"Victoria\",\r",
									"                            1000,\r",
									"                            28\r",
									"                        ]\r",
									"                    ]\r",
									"                },\r",
									"                \"u_salary_1_5_year\": {\r",
									"                    \"type\": \"integer\",\r",
									"                    \"default\": 0,\r",
									"                    \"title\": \"The u_salary_1_5_year Schema\",\r",
									"                    \"examples\": [\r",
									"                        4000\r",
									"                    ]\r",
									"                }\r",
									"            },\r",
									"            \"examples\": [{\r",
									"                \"u_age\": 28,\r",
									"                \"u_name\": [\r",
									"                    \"Victoria\",\r",
									"                    1000,\r",
									"                    28\r",
									"                ],\r",
									"                \"u_salary_1_5_year\": 4000\r",
									"            }]\r",
									"        },\r",
									"        \"qa_salary_after_12_months\": {\r",
									"            \"type\": \"number\",\r",
									"            \"default\": 0.0,\r",
									"            \"title\": \"The qa_salary_after_12_months Schema\",\r",
									"            \"examples\": [\r",
									"                2900.0\r",
									"            ]\r",
									"        },\r",
									"        \"qa_salary_after_6_months\": {\r",
									"            \"type\": \"integer\",\r",
									"            \"default\": 0,\r",
									"            \"title\": \"The qa_salary_after_6_months Schema\",\r",
									"            \"examples\": [\r",
									"                2000\r",
									"            ]\r",
									"        },\r",
									"        \"start_qa_salary\": {\r",
									"            \"type\": \"integer\",\r",
									"            \"default\": 0,\r",
									"            \"title\": \"The start_qa_salary Schema\",\r",
									"            \"examples\": [\r",
									"                1000\r",
									"            ]\r",
									"        }\r",
									"    },\r",
									"    \"examples\": [{\r",
									"        \"person\": {\r",
									"            \"u_age\": 28,\r",
									"            \"u_name\": [\r",
									"                \"Victoria\",\r",
									"                1000,\r",
									"                28\r",
									"            ],\r",
									"            \"u_salary_1_5_year\": 4000\r",
									"        },\r",
									"        \"qa_salary_after_12_months\": 2900.0,\r",
									"        \"qa_salary_after_6_months\": 2000,\r",
									"        \"start_qa_salary\": 1000\r",
									"    }]\r",
									"}\r",
									"pm.test(\"Проверка структуры json в ответе\", function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"// 3. В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
									"var resp = pm.response.json();\r",
									"var req = request.data;\r",
									"\r",
									"pm.test(\"SALARY_6_months\", function () {\r",
									"    pm.expect(+resp.qa_salary_after_6_months).to.eql(+request.salary*2);\r",
									"});\r",
									"\r",
									"pm.test(\"SALARY_12_months\", function () {\r",
									"    pm.expect(+resp.qa_salary_after_12_months).to.eql(+request.salary*2.9);\r",
									"});\r",
									"\r",
									"pm.test(\"SALARY_1_5_year\", function () {\r",
									"    pm.expect(+resp.u_salary_1_5_year).to.eql(+request.salary*4);\r",
									"});\r",
									"\r",
									"// 4. Достать значение из поля 'u_salary_1.5_year' и передать в поле salary запроса http://162.55.220.72:5005/get_test_user\r",
									"var resp_salary_1_5_year = JSON.parse(resp.person.u_salary_1_5_year);\r",
									"console.log(resp_salary_1_5_year)\r",
									"pm.environment.get(\"salary_1_5\");\r",
									"pm.environment.set(\"salary_1_5\", resp_salary_1_5_year);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"age\": 28,\r\n    \"salary\": 1000,\r\n    \"name\": \"Victoria\",\r\n    \"auth_token\": \"{{token}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://162.55.220.72:5005/user_info",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"user_info"
							]
						}
					},
					"response": []
				},
				{
					"name": "2 /get_test_user",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "age",
									"value": "28",
									"type": "default"
								},
								{
									"key": "salary",
									"value": "{{salary}}",
									"type": "default"
								},
								{
									"key": "name",
									"value": "Victoria",
									"type": "default"
								},
								{
									"key": "auth_token",
									"value": "{{token}}",
									"type": "default"
								}
							]
						},
						"url": {
							"raw": "http://162.55.220.72:5005/get_test_user",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"get_test_user"
							]
						}
					},
					"response": []
				},
				{
					"name": "3 /new_data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 1. Статус код 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"// 2. Проверка структуры json в ответе.\r",
									"var schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"default\": {},\r",
									"    \"title\": \"Root Schema\",\r",
									"    \"required\": [\r",
									"        \"age\",\r",
									"        \"name\",\r",
									"        \"salary\"\r",
									"    ],\r",
									"    \"properties\": {\r",
									"        \"age\": {\r",
									"            \"type\": \"integer\",\r",
									"            \"default\": 0,\r",
									"            \"title\": \"The age Schema\",\r",
									"            \"examples\": [\r",
									"                28\r",
									"            ]\r",
									"        },\r",
									"        \"name\": {\r",
									"            \"type\": \"string\",\r",
									"            \"default\": \"\",\r",
									"            \"title\": \"The name Schema\",\r",
									"            \"examples\": [\r",
									"                \"Victoria\"\r",
									"            ]\r",
									"        },\r",
									"        \"salary\": {\r",
									"            \"type\": \"array\",\r",
									"            \"default\": [],\r",
									"            \"title\": \"The salary Schema\",\r",
									"            \"items\": {\r",
									"                \"anyOf\": [{\r",
									"                    \"type\": \"integer\",\r",
									"                    \"default\": 0,\r",
									"                    \"title\": \"A Schema\",\r",
									"                    \"examples\": [\r",
									"                        1000\r",
									"                    ]\r",
									"                },\r",
									"                {\r",
									"                    \"type\": \"string\",\r",
									"                    \"title\": \"A Schema\",\r",
									"                    \"examples\": [\r",
									"                        \"2000\",\r",
									"                        \"3000\"\r",
									"                    ]\r",
									"                }]\r",
									"            },\r",
									"            \"examples\": [\r",
									"                [1000,\r",
									"                    \"2000\",\r",
									"                    \"3000\"\r",
									"                ]\r",
									"            ]\r",
									"        }\r",
									"    },\r",
									"    \"examples\": [{\r",
									"        \"age\": 28,\r",
									"        \"name\": \"Victoria\",\r",
									"        \"salary\": [\r",
									"            1000,\r",
									"            \"2000\",\r",
									"            \"3000\"\r",
									"        ]\r",
									"    }]\r",
									"}\r",
									"\r",
									"pm.test(\"Проверка структуры json в ответе\", function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"// 3. В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
									"// Спарсить response body в json\r",
									"var resp = pm.response.json();\r",
									"// // Спарсить request.\r",
									"var req = request.data;\r",
									"\r",
									"pm.test(\"SALARY[0]\", function () {\r",
									"    pm.expect(+resp.salary[0]).to.eql(+req.salary);\r",
									"});\r",
									"\r",
									"pm.test(\"SALARY[1]\", function () {\r",
									"    pm.expect(+resp.salary[1]).to.eql(+req.salary*2);\r",
									"});\r",
									"\r",
									"pm.test(\"SALARY[2]\", function () {\r",
									"    pm.expect(+resp.salary[2]).to.eql(+req.salary*3);\r",
									"});\r",
									"// 4. Проверить, что 2-й элемент массива salary больше 1-го и 0-го\r",
									"pm.test(\"salary2 > salary1 && salary0\", function () {\r",
									"    const salCheck = resp.salary[2] > resp.salary[1] && resp.salary[2] > resp.salary[0]\r",
									"    pm.expect(salCheck).to.be.true\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "age",
									"value": "28",
									"type": "default"
								},
								{
									"key": "salary",
									"value": "1000",
									"type": "default"
								},
								{
									"key": "name",
									"value": "Victoria",
									"type": "default"
								},
								{
									"key": "auth_token",
									"value": "{{token}}",
									"type": "default"
								}
							],
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://162.55.220.72:5005/new_data",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"new_data"
							]
						}
					},
					"response": []
				},
				{
					"name": "4 /test_pet_info",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 1. Статус код 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"// 2. Проверка структуры json в ответе.\r",
									"var schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"default\": {},\r",
									"    \"title\": \"Root Schema\",\r",
									"    \"required\": [\r",
									"        \"age\",\r",
									"        \"daily_food\",\r",
									"        \"daily_sleep\",\r",
									"        \"name\"\r",
									"    ],\r",
									"    \"properties\": {\r",
									"        \"age\": {\r",
									"            \"type\": \"integer\",\r",
									"            \"default\": 0,\r",
									"            \"title\": \"The age Schema\",\r",
									"            \"examples\": [\r",
									"                28\r",
									"            ]\r",
									"        },\r",
									"        \"daily_food\": {\r",
									"            \"type\": \"number\",\r",
									"            \"default\": 0.0,\r",
									"            \"title\": \"The daily_food Schema\",\r",
									"            \"examples\": [\r",
									"                0.6\r",
									"            ]\r",
									"        },\r",
									"        \"daily_sleep\": {\r",
									"            \"type\": \"number\",\r",
									"            \"default\": 0.0,\r",
									"            \"title\": \"The daily_sleep Schema\",\r",
									"            \"examples\": [\r",
									"                125.0\r",
									"            ]\r",
									"        },\r",
									"        \"name\": {\r",
									"            \"type\": \"string\",\r",
									"            \"default\": \"\",\r",
									"            \"title\": \"The name Schema\",\r",
									"            \"examples\": [\r",
									"                \"Victoria\"\r",
									"            ]\r",
									"        }\r",
									"    },\r",
									"    \"examples\": [{\r",
									"        \"age\": 28,\r",
									"        \"daily_food\": 0.6,\r",
									"        \"daily_sleep\": 125.0,\r",
									"        \"name\": \"Victoria\"\r",
									"    }]\r",
									"}\r",
									"\r",
									"pm.test(\"Проверка структуры json в ответе\", function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"// 3. В ответе указаны коэффициенты умножения weight, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
									"// Спарсить response body в json\r",
									"var resp = pm.response.json();\r",
									"// // Спарсить request.\r",
									"var req = request.data;\r",
									"\r",
									"pm.test(\"WEIGHT_1\", function () {\r",
									"    pm.expect(resp.daily_food).to.eql(req.weight*0.012);\r",
									"});\r",
									"\r",
									"pm.test(\"WEIGHT_2\", function () {\r",
									"    pm.expect(resp.daily_sleep).to.eql(req.weight*2.5);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "age",
									"value": "28",
									"type": "default"
								},
								{
									"key": "weight",
									"value": "50",
									"type": "default"
								},
								{
									"key": "name",
									"value": "Victoria",
									"type": "default"
								},
								{
									"key": "auth_token",
									"value": "{{token}}",
									"type": "default"
								}
							]
						},
						"url": {
							"raw": "http://162.55.220.72:5005/test_pet_info",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"test_pet_info"
							]
						}
					},
					"response": []
				},
				{
					"name": "5 /get_test_user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 1. Статус код 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"// 2. Проверка структуры json в ответе.\r",
									"var schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"default\": {},\r",
									"    \"title\": \"Root Schema\",\r",
									"    \"required\": [\r",
									"        \"age\",\r",
									"        \"family\",\r",
									"        \"name\",\r",
									"        \"salary\"\r",
									"    ],\r",
									"    \"properties\": {\r",
									"        \"age\": {\r",
									"            \"type\": \"string\",\r",
									"            \"default\": \"\",\r",
									"            \"title\": \"The age Schema\",\r",
									"            \"examples\": [\r",
									"                \"28\"\r",
									"            ]\r",
									"        },\r",
									"        \"family\": {\r",
									"            \"type\": \"object\",\r",
									"            \"default\": {},\r",
									"            \"title\": \"The family Schema\",\r",
									"            \"required\": [\r",
									"                \"children\",\r",
									"                \"u_salary_1_5_year\"\r",
									"            ],\r",
									"            \"properties\": {\r",
									"                \"children\": {\r",
									"                    \"type\": \"array\",\r",
									"                    \"default\": [],\r",
									"                    \"title\": \"The children Schema\",\r",
									"                    \"items\": {\r",
									"                        \"type\": \"array\",\r",
									"                        \"title\": \"A Schema\",\r",
									"                        \"items\": {\r",
									"                            \"anyOf\": [{\r",
									"                                \"type\": \"string\",\r",
									"                                \"title\": \"A Schema\",\r",
									"                                \"examples\": [\r",
									"                                    \"Alex\",\r",
									"                                    \"Kate\"\r",
									"                                ]\r",
									"                            },\r",
									"                            {\r",
									"                                \"type\": \"integer\",\r",
									"                                \"title\": \"A Schema\",\r",
									"                                \"examples\": [\r",
									"                                    24,\r",
									"                                    12\r",
									"                                ]\r",
									"                            }]\r",
									"                        },\r",
									"                        \"examples\": [\r",
									"                            [\"Alex\",\r",
									"                                24\r",
									"                            ],\r",
									"                            [\"Kate\",\r",
									"                                12\r",
									"                            ]\r",
									"                        ]\r",
									"                    },\r",
									"                    \"examples\": [\r",
									"                        [\r",
									"                            [\"Alex\",\r",
									"                                24\r",
									"                            ],\r",
									"                            [\"Kate\",\r",
									"                                12\r",
									"                            ]\r",
									"                        ]\r",
									"                    ]\r",
									"                },\r",
									"                \"u_salary_1_5_year\": {\r",
									"                    \"type\": \"integer\",\r",
									"                    \"default\": 0,\r",
									"                    \"title\": \"The u_salary_1_5_year Schema\",\r",
									"                    \"examples\": [\r",
									"                        4000\r",
									"                    ]\r",
									"                }\r",
									"            },\r",
									"            \"examples\": [{\r",
									"                \"children\": [\r",
									"                    [\"Alex\",\r",
									"                        24\r",
									"                    ],\r",
									"                    [\"Kate\",\r",
									"                        12\r",
									"                    ]\r",
									"                ],\r",
									"                \"u_salary_1_5_year\": 4000\r",
									"            }]\r",
									"        },\r",
									"        \"name\": {\r",
									"            \"type\": \"string\",\r",
									"            \"default\": \"\",\r",
									"            \"title\": \"The name Schema\",\r",
									"            \"examples\": [\r",
									"                \"Victoria\"\r",
									"            ]\r",
									"        },\r",
									"        \"salary\": {\r",
									"            \"type\": \"integer\",\r",
									"            \"default\": 0,\r",
									"            \"title\": \"The salary Schema\",\r",
									"            \"examples\": [\r",
									"                1000\r",
									"            ]\r",
									"        }\r",
									"    },\r",
									"    \"examples\": [{\r",
									"        \"age\": \"28\",\r",
									"        \"family\": {\r",
									"            \"children\": [\r",
									"                [\"Alex\",\r",
									"                    24\r",
									"                ],\r",
									"                [\"Kate\",\r",
									"                    12\r",
									"                ]\r",
									"            ],\r",
									"            \"u_salary_1_5_year\": 4000\r",
									"        },\r",
									"        \"name\": \"Victoria\",\r",
									"        \"salary\": 1000\r",
									"    }]\r",
									"}\r",
									"\r",
									"pm.test(\"Проверка структуры json в ответе\", function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"// 3.Проверить что занчение поля name = значению переменной name из окружения\r",
									"// Спарсить response body в json\r",
									"var resp = pm.response.json();\r",
									"console.log(pm.environment.get(\"name\"))\r",
									"pm.test(\"enviroment_name\", function () {\r",
									"    pm.expect(pm.environment.get(\"name\")).to.eql(resp.name);\r",
									"});\r",
									"\r",
									"// 4. Проверить что занчение поля age в ответе соответсвует отправленному в запросе значению поля age\r",
									"// // Спарсить request.\r",
									"var req = request.data;\r",
									"\r",
									"pm.test(\"Req_Resp_AGE_check\", function () {\r",
									"    pm.expect(resp.age).to.eql(req.age);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "age",
									"value": "28",
									"type": "default"
								},
								{
									"key": "salary",
									"value": "1000",
									"type": "default"
								},
								{
									"key": "name",
									"value": "Victoria",
									"type": "default"
								},
								{
									"key": "auth_token",
									"value": "{{token}}",
									"type": "default"
								}
							]
						},
						"url": {
							"raw": "http://162.55.220.72:5005/get_test_user",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"get_test_user"
							]
						}
					},
					"response": []
				},
				{
					"name": "6 /currency",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "auth_token",
									"value": "{{token}}",
									"type": "default"
								}
							]
						},
						"url": {
							"raw": "http://162.55.220.72:5005/currency",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"currency"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}